import * as React from "react"
import { addPropertyControls, ControlType } from "framer"
// tslint:disable-next-line: ban-ts-ignore
// @ts-ignore
import { color } from "./canvas"

import {
    makeStyles,
    withStyles,
    createMuiTheme,
    ThemeProvider,
    // @ts-ignore
} from "@material-ui/core/styles"
import { Icon } from "./MyIcon2"
// @ts-ignore
import MuiButton from "@material-ui/core/Button"
import { myTheme } from "./MyTheme"
import { darkTheme } from "./MyDarkTheme"

interface Props {
    color?: "default" | "inherit" | "primary" | "secondary"
    disabled?: boolean
    themeType?: boolean
    disableElevation?: boolean
    endIcon?: string
    fullWidth?: boolean
    href?: string
    size?: "small" | "medium" | "large"
    startIcon?: string
    variant?: "text" | "outlined" | "contained"
    startIconTheme?: "Filled" | "Outlined" | "Rounded" | "TwoTone" | "Sharp"
    endIconTheme?: "Filled" | "Outlined" | "Rounded" | "TwoTone" | "Sharp"
    label?: string
    instance: any
    disableRipple?: boolean
    width?: number
    height?: number
}

const defaultProps: Props = {
    color: "default",
    disabled: false,
    themeType: false,
    disableElevation: false,
    endIcon: undefined,
    fullWidth: false,
    size: "medium",
    startIcon: undefined,
    variant: "outlined",
    startIconTheme: "Filled",
    endIconTheme: "Filled",
    label: "Button",
    instance: null,
    disableRipple: false,
    width: 100,
    height: 38,
}

const useStyles = makeStyles({
    style: {
        borderRadius: 4,
        fontWeight: 700,
        "&.MuiButton-containedPrimary": {
            color: "rgba(0,0,0,0.8)",
            "&:hover": {
                backgroundColor: darkTheme.palette.primary.dark,
                // "&:hover": {
                //     backgroundColor: color.primaryLight,
                //     "&.Mui-disabled": {
                //         backgroundColor: color.primaryLight,
                //     },
                // },
            },
            "& .MuiTouchRipple-child": {
                backgroundColor: darkTheme.palette.error.main,
            },
            "&.Mui-disabled": {
                backgroundColor: darkTheme.palette.primary.main,
                color: "rgba(0,0,0,0.4)",
                "&:hover": {
                    backgroundColor: darkTheme.palette.primary.main,
                    color: "rgba(0,0,0,0.4)",
                },
            },
        },
        "&.MuiButton-outlined": {
            //borderColor: darkTheme.palette.default.main,
            color: darkTheme.palette.text.default,
            boxShadow: "inset 0 0 0 2px " + darkTheme.palette.default.main,
            borderWidth: 0,
            "&:hover": {
                backgroundColor: "transparent",
                boxShadow: "inset 0 0 0 3px",
                //borderWidth: 3,
                // "&:hover": {
                //     backgroundColor: color.primaryLight,
                //     "&.Mui-disabled": {
                //         backgroundColor: color.primaryLight,
                //     },
                // },
            },
            "& .MuiTouchRipple-child": {
                //backgroundColor: darkTheme.palette.error.main,
            },
        },
        "&.MuiButton-outlinedPrimary": {
            //borderColor: darkTheme.palette.default.main,

            boxShadow: "inset 0 0 0 2px " + darkTheme.palette.primary.main,
            borderWidth: 0,
            "&:hover": {
                backgroundColor: "transparent",
                boxShadow: "inset 0 0 0 3px",
                //borderWidth: 3,
                // "&:hover": {
                //     backgroundColor: color.primaryLight,
                //     "&.Mui-disabled": {
                //         backgroundColor: color.primaryLight,
                //     },
                // },
            },
            "& .MuiTouchRipple-child": {
                //backgroundColor: darkTheme.palette.error.main,
            },
        },
    },
})

export const MyButton = (props: Props) => {
    const {
        instance,
        endIcon,
        endIconTheme,
        height,
        label,
        startIcon,
        startIconTheme,
        variant,
        width,
        disableRipple,
        themeType,
        disableElevation,
        ...other
    } = props

    const classes = useStyles(props)

    const StartIcon = startIcon !== "" && (
        <Icon icon={startIcon} theme={startIconTheme}></Icon>
    )

    const EndIcon = endIcon !== "" && (
        <Icon icon={endIcon} theme={endIconTheme} />
    )

    return (
        <ThemeProvider theme={darkTheme}>
            <MuiButton
                className={classes.style}
                variant={variant}
                startIcon={StartIcon}
                endIcon={EndIcon}
                disableRipple={disableRipple}
                {...other}
            >
                {instance[0] &&
                    React.cloneElement(instance[0], {
                        // width: 22,
                        // height: 22,
                        //left: 10,
                        style: { marginRight: 10 },
                        size: "auto",
                        position: "relative",

                        //background: darkTheme.palette.primary.main,
                    })}
                {label}
            </MuiButton>
        </ThemeProvider>
    )
}

MyButton.defaultProps = defaultProps

addPropertyControls(MyButton, {
    color: {
        type: ControlType.Enum,
        title: "Color",
        options: ["default", "inherit", "primary", "secondary"],
    },
    disabled: {
        type: ControlType.Boolean,
        title: "Disabled",
    },
    themeType: {
        type: ControlType.Boolean,
        title: "Dark theme",
    },
    disableRipple: {
        type: ControlType.Boolean,
        title: "Disable ripple",
    },
    disableElevation: {
        type: ControlType.Boolean,
        title: "Disable elevation",
    },
    endIcon: {
        type: ControlType.String,
        title: "End icon",
    },
    fullWidth: {
        type: ControlType.Boolean,
        title: "Full width",
    },
    href: {
        type: ControlType.String,
        title: "Href",
    },
    size: {
        type: ControlType.Enum,
        title: "Size",
        options: ["small", "medium", "large"],
    },
    startIcon: {
        type: ControlType.String,
        title: "Start icon",
    },
    variant: {
        type: ControlType.Enum,
        title: "Variant",
        options: ["text", "outlined", "contained"],
    },
    startIconTheme: {
        type: ControlType.Enum,
        title: "Start icon theme",
        options: ["Filled", "Outlined", "Rounded", "TwoTone", "Sharp"],
    },
    endIconTheme: {
        type: ControlType.Enum,
        title: "End icon theme",
        options: ["Filled", "Outlined", "Rounded", "TwoTone", "Sharp"],
    },
    label: {
        type: ControlType.String,
        title: "Label",
    },
    instance: {
        type: ControlType.ComponentInstance,
        title: "Instance",
    },
})

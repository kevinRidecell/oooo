import * as React from "react"
import { addPropertyControls, ControlType } from "framer"
// tslint:disable-next-line: ban-ts-ignore
// @ts-ignore
import {
    makeStyles,
    withStyles,
    createMuiTheme,
    ThemeProvider,
} from "@material-ui/core/styles"
import MuiTextField from "@material-ui/core/TextField"
import { myTheme } from "./MyTheme"

import clsx from "clsx"

import IconButton from "@material-ui/core/IconButton"
import Input from "@material-ui/core/Input"
import FilledInput from "@material-ui/core/FilledInput"
import OutlinedInput from "@material-ui/core/OutlinedInput"
import InputLabel from "@material-ui/core/InputLabel"
import InputAdornment from "@material-ui/core/InputAdornment"
import FormHelperText from "@material-ui/core/FormHelperText"
import FormControl from "@material-ui/core/FormControl"

import Visibility from "@material-ui/icons/Visibility"
import VisibilityOff from "@material-ui/icons/VisibilityOff"

interface Props {
    autoFocus?: boolean
    color?: "primary" | "secondary"
    disabled?: boolean
    error?: boolean
    fullWidth?: boolean
    helperText?: string
    label?: string
    multiline?: boolean
    placeholder?: string
    required?: boolean
    size?: "small" | "medium"
    variant?: "standard" | "outlined" | "filled"
    type?: "text" | "password"
    width?: number
    height?: number
    value?: string
}

const defaultProps: Props = {
    autoFocus: false,
    color: "primary",
    disabled: false,
    error: false,
    fullWidth: true,
    helperText: "",
    label: "TextField",
    multiline: false,
    required: false,
    variant: "standard",
    type: "text",
    width: 280,
    height: 56,
    size: "medium",
}

const useStyles = makeStyles({
    root: {
        "&.MuiFormControl-root": {
            "& label": {
                color: "rgba(0,0,0,0.5)",
                left: 16,
                top: -8,
            },
            "& label.Mui-focused": {
                left: 16,
                top: -8,
            },
            "& .MuiInputLabel-formControl": {
                marginTop: 2,
            },
        },

        "& .MuiOutlinedInput-root": {
            color: "black",
            backgroundColor: "rgba(255,255,255,0.4)",
            "& fieldset": {
                borderColor: myTheme.palette.default.main,
                borderRadius: 0,
            },

            "&:hover fieldset": {
                borderColor: "black",
            },
            "&.Mui-focused fieldset": {
                borderColor: myTheme.palette.primary.main,
                borderWidth: 2,
            },
        },
    },
})

export const MyPasswordTextField = (props: Props) => {
    const { width, height, multiline,helperText, ...other } = props
    const classes = useStyles()

    const [values, setValues] = React.useState({
        amount: "",
        password: props.value,
        weight: "",
        weightRange: "",
        showPassword: false,
    })

    const handleChange = prop => event => {
        setValues({ ...values, [prop]: event.target.value })
        //console.log("values: " + values.password)
    }

    const handleClickShowPassword = () => {
        setValues({ ...values, showPassword: !values.showPassword })
    }

    const handleMouseDownPassword = event => {
        event.preventDefault()
    }

    return (
        <ThemeProvider theme={myTheme}>
            <FormControl className={classes.root} variant="outlined" {...other}>
                <OutlinedInput
                    id="outlined-adornment-password"
                    type={values.showPassword ? "text" : "password"}
                    onChange={handleChange("password")}
                    value={values.password}
                    endAdornment={
                        <InputAdornment position="end">
                            <IconButton
                                aria-label="toggle password visibility"
                                onClick={handleClickShowPassword}
                                onMouseDown={handleMouseDownPassword}
                                edge="end"
                            >
                                {values.showPassword ? (
                                    <Visibility />
                                ) : (
                                    <VisibilityOff />
                                )}
                            </IconButton>
                        </InputAdornment>
                    }
                    labelWidth={80}
                />
                <InputLabel htmlFor="outlined-adornment-password">
                    Password
                </InputLabel>
            </FormControl>
        </ThemeProvider>
    )
}

MyPasswordTextField.defaultProps = defaultProps

addPropertyControls(MyPasswordTextField, {
    autoFocus: {
        type: ControlType.Boolean,
        title: "Auto focus",
    },
    color: {
        type: ControlType.Enum,
        title: "Color",
        options: ["primary", "secondary"],
    },
    disabled: {
        type: ControlType.Boolean,
        title: "Disabled",
    },

    error: {
        type: ControlType.Boolean,
        title: "Error",
    },
    fullWidth: {
        type: ControlType.Boolean,
        title: "Full width",
    },
    helperText: {
        type: ControlType.String,
        title: "Helper text",
    },
    label: {
        type: ControlType.String,
        title: "Label",
    },
    multiline: {
        type: ControlType.Boolean,
        title: "Multiline",
    },
    placeholder: {
        type: ControlType.String,
        title: "Placeholder",
    },
    required: {
        type: ControlType.Boolean,
        title: "Required",
    },
    size: {
        type: ControlType.Enum,
        title: "Size",
        options: ["small", "medium"],
    },
    variant: {
        type: ControlType.Enum,
        title: "Variant",
        options: ["standard", "outlined", "filled"],
    },
    type: {
        type: ControlType.Enum,
        title: "Type",
        options: ["text", "password"],
    },
})

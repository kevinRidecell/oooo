import * as React from "react"
import { addPropertyControls, ControlType } from "framer"
// tslint:disable-next-line: ban-ts-ignore
// @ts-ignore
import { colors } from "./canvas"
import { parseColor } from "./utils/parseColor"
import { Icon } from "./MyIcon2"
import IconButton from "@material-ui/core/IconButton"
import * as Icons from "@material-ui/icons"
import {
    makeStyles,
    withStyles,
    createMuiTheme,
    ThemeProvider,
} from "@material-ui/core/styles"
import InputAdornment from "@material-ui/core/InputAdornment"
// import { myTheme } from "./MyTheme"
// import { darkTheme } from "./MyDarkTheme"
import MuiTextField from "@material-ui/core/TextField"

//import { createStore } from "./store"

const myColors = {
    primary: colors.primary,
    primaryLight: colors.primaryLight,
    primaryDark: colors.primaryDark,
    secondary: colors.secondary,
    default: colors.darkThemeDefault,
    defaultDark: colors.darkThemeDefaultDark,
    defaultLight: colors.darkThemeDefaultLight,
    darkDefault: colors.default,
    darkDefaultDark: colors.defaultDark,
    darkDefaultLight: colors.defaultLight,
    error: "#f44336",
    info: "#2196f3",
    warning: "#ff9800",
    success: "#4caf4f",
}

const darkTheme = createMuiTheme({
    palette: {
        type: "dark",
        primary: {
            main: parseColor(myColors.primary),
            light: parseColor(myColors.primaryLight),
            dark: parseColor(myColors.primaryDark),
        },
        secondary: { main: parseColor(myColors.secondary) },
        default: {
            main: parseColor(myColors.default),
            light: parseColor(myColors.defaultLight),
            dark: parseColor(myColors.defaultDark),
        },
        contrastThreshold: 3,
    },
    typography: {
        fontFamily: [
            "Open Sans",
            "Roboto",
            '"Helvetica Neue"',
            "Arial",
            "sans-serif",
            '"Apple Color Emoji"',
            '"Segoe UI Emoji"',
            '"Segoe UI Symbol"',
        ].join(","),
    },
})

const lightTheme = createMuiTheme({
    palette: {
        primary: {
            main: parseColor(myColors.primary),
            light: parseColor(myColors.primaryLight),
            dark: parseColor(myColors.primaryDark),
        },
        secondary: { main: parseColor(myColors.secondary) },
        default: {
            main: parseColor(myColors.darkDefault),
            light: parseColor(myColors.darkDefaultLight),
            dark: parseColor(myColors.darkDefaultDark),
        },
        contrastThreshold: 3,
    },
    typography: {
        fontFamily: [
            "Open Sans",
            "Roboto",
            '"Helvetica Neue"',
            "Arial",
            "sans-serif",
            '"Apple Color Emoji"',
            '"Segoe UI Emoji"',
            '"Segoe UI Symbol"',
        ].join(","),
    },
})

interface Props {
    backgroundColor?: string
    labelColor?: string
    iconColor?: string
    startIcon?: string
    startIconTheme?: "Filled" | "Outlined" | "Rounded" | "TwoTone" | "Sharp"
    endIcon?: string
    endIconTheme?: "Filled" | "Outlined" | "Rounded" | "TwoTone" | "Sharp"
    autoFocus?: boolean
    color?: "primary" | "secondary"
    disabled?: boolean
    themeType?: boolean
    error?: boolean
    fullWidth?: boolean
    helperText?: string
    label?: string
    multiline?: boolean
    placeholder?: string
    required?: boolean
    size?: "small" | "medium"
    variant?: "standard" | "outlined" | "filled"
    type?: "text" | "password"
    width?: number
    height?: number
    value?: string
}

const defaultProps: Props = {
    backgroundColor: "rgba(255, 255, 255, 0.08)",
    labelColor: "#808080",
    iconColor: "#707070",
    startIcon: undefined,
    startIconTheme: "Filled",
    endIcon: "today",
    endIconTheme: "Filled",
    autoFocus: false,
    color: "primary",
    disabled: false,
    themeType: false,
    error: false,
    fullWidth: true,
    helperText: "",
    label: "TextField label",
    multiline: false,
    required: false,
    variant: "outlined",
    type: "text",
    size: "medium",
    width: 280,
    height: 56,
}

//export const useStore = createStore({ text: "" })

const useStyles = makeStyles(props => ({
    root: {
        "& .MuiFormLabel-root": {
            color: props => props.labelColor,
            // transform: props => props.size === "small"
            // ? "translate(13px, 12px) scale(1)"
            // : "translate(13px, 18px) scale(1)"

            //fontSize: props => (props.size === "medium" ? 16 : 14),
        },
        "& label.Mui-focused": {
            //fontSize: 16,
        },
        "& .MuiOutlinedInput-root": {
            color: props => (props.themeType ? "white" : "rgba(0,0,0,0.8)"),
            //fontSize: props => (props.size === "medium" ? 16 : 14),
            //fontSize: props => (props.height >= 56 ? 16 : 14),
            //fontSize: 14,
            backgroundColor: props => props.backgroundColor,
            "& fieldset": {
                borderColor: props =>
                    props.themeType
                        ? darkTheme.palette.default.main
                        : lightTheme.palette.default.main,
                borderWidth: 2,
                borderRadius: 2,
            },

            "&:hover fieldset": {
                borderColor: props =>
                    props.themeType
                        ? darkTheme.palette.default.light
                        : lightTheme.palette.default.dark,
            },
            "&.Mui-focused fieldset": {
                borderColor: props =>
                    props.themeType
                        ? darkTheme.palette.primary.main
                        : lightTheme.palette.primary.main,
                borderWidth: 2,
            },
        },
    },
}))

export const MyTextField = (props: Props) => {
    const {
        width,
        height,
        themeType,
        type,
        endIcon,
        endIconTheme,
        startIcon,
        startIconTheme,
        iconColor,
        backgroundColor,
        labelColor,
        multiline,
        helperText,
        ...other
    } = props

    //const [store, setStore] = useStore()
    const [themeState, setTheme] = React.useState(darkTheme)
    const classes = useStyles(props)
    React.useEffect(() => {
        themeType ? setTheme(darkTheme) : setTheme(lightTheme)
    }, [themeType])

    const handleClickShowPassword = event => {
        event.preventDefault()
        //setValues({ ...values, showPassword: !values.showPassword })
    }

    const handleMouseDownPassword = event => {
        event.preventDefault()
    }
    const StartIcon =
        startIcon === "" ? null : (
            <InputAdornment position="start">
                <IconButton
                    aria-label="toggle password visibility"
                    onClick={handleClickShowPassword}
                    onMouseDown={handleMouseDownPassword}
                    edge="end"
                >
                    <Icon
                        icon={startIcon}
                        theme={startIconTheme}
                        color={iconColor}
                        //width={20}
                    />
                </IconButton>
            </InputAdornment>
        )

    const EndIcon =
        endIcon === "" ? null : (
            <IconButton
                aria-label="toggle password visibility"
                onClick={handleClickShowPassword}
                onMouseDown={handleMouseDownPassword}
                edge="end"
            >
                <Icon
                    icon={endIcon}
                    theme={endIconTheme}
                    color={iconColor}
                    //width={20}
                />
            </IconButton>
        )

    // const [values, setValues] = React.useState({
    //     text: "",
    // })

    const handleChange = prop => event => {
        //setStore({ ...store, [prop]: event.target.value })
    }

    return (
        <ThemeProvider theme={themeState}>
            <MuiTextField
                InputProps={{
                    type: type,
                    startAdornment: StartIcon,
                    endAdornment: (
                        <InputAdornment position="end">
                            {EndIcon}
                        </InputAdornment>
                    ),
                }}
                className={classes.root}
                onChange={handleChange("text")}
                {...other}
            />
        </ThemeProvider>
    )
}

MyTextField.defaultProps = defaultProps

addPropertyControls(MyTextField, {
    autoFocus: {
        type: ControlType.Boolean,
        title: "Auto focus",
    },
    color: {
        type: ControlType.Enum,
        title: "Color",
        options: ["primary", "secondary"],
    },
    backgroundColor: {
        type: ControlType.Color,
        title: "Background Color",
    },
    disabled: {
        type: ControlType.Boolean,
        title: "Disabled",
    },
    themeType: {
        type: ControlType.Boolean,
        title: "Dark theme",
    },
    error: {
        type: ControlType.Boolean,
        title: "Error",
    },
    fullWidth: {
        type: ControlType.Boolean,
        title: "Full width",
    },
    helperText: {
        type: ControlType.String,
        title: "Helper text",
    },
    label: {
        type: ControlType.String,
        title: "Label",
    },
    labelColor: {
        type: ControlType.Color,
        title: "Label Color",
    },
    multiline: {
        type: ControlType.Boolean,
        title: "Multiline",
    },
    placeholder: {
        type: ControlType.String,
        title: "Placeholder",
    },
    required: {
        type: ControlType.Boolean,
        title: "Required",
    },
    size: {
        type: ControlType.Enum,
        title: "Size",
        options: ["small", "medium"],
    },

    endIcon: {
        type: ControlType.String,
        title: "End icon",
    },
    startIcon: {
        type: ControlType.String,
        title: "Start icon",
    },
    iconColor: {
        type: ControlType.Color,
        title: "Icon color",
    },
    startIconTheme: {
        type: ControlType.Enum,
        title: "Start icon theme",
        options: ["Filled", "Outlined", "Rounded", "TwoTone", "Sharp"],
    },
    endIconTheme: {
        type: ControlType.Enum,
        title: "End icon theme",
        options: ["Filled", "Outlined", "Rounded", "TwoTone", "Sharp"],
    },
    variant: {
        type: ControlType.Enum,
        title: "Variant",
        options: ["standard", "outlined", "filled"],
    },
    type: {
        type: ControlType.Enum,
        title: "Type",
        options: ["text", "password"],
    },
})

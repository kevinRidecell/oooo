import * as React from 'react';
import { PropertyControls, ControlType } from 'framer';
import {
  Field as _Field,
  Label as _Label,
  Control as _Control,
  Input as _Input
} from 'bloomer';

const colors = {
  primary: 'primary',
  info: 'info',
  danger: 'danger',
  warning: 'warning',
  success: 'success',
  white: 'white',
  black: 'black',
  light: 'light',
  dark: 'dark',
  link: 'link'
};

const sizes = {
  large: 'large',
  medium: 'medium',
  small: 'small'
};

type Directions = 'left' | 'right';

// Define type of property
interface Props {
  //field
  fieldIsGrouped: boolean;
  fieldGroupDirection?: boolean | 'right' | 'centered';
  fieldHasAddons: boolean;
  fieldAddonsDirection?: boolean | 'right' | 'centered' | 'fullwidth';
  fieldIsHorizontal: boolean;

  //label
  labelIsSize: 'large' | 'medium' | 'small';
  labelText: string;

  //control
  controlIsLoading: boolean;
  contorlIsExpanded: boolean;
  controlHasIcons: boolean;
  controlIconDirections: Directions | Directions[];

  //input
  inputIsSize: 'large' | 'medium' | 'small';
  inputIsColor:
    | 'white'
    | 'light'
    | 'dark'
    | 'black'
    | 'primary'
    | 'info'
    | 'success'
    | 'warning'
    | 'danger';
  inputIsActive: boolean;
  inputIsHovered: boolean;
  inputIsFocused: boolean;
  inputPlaceholder?: string;
  inputValue?: string;

  //help
  helpIsColor:
    | 'white'
    | 'light'
    | 'dark'
    | 'black'
    | 'primary'
    | 'info'
    | 'success'
    | 'warning'
    | 'danger';
  //select
  selectIsColor:
    | 'white'
    | 'light'
    | 'dark'
    | 'black'
    | 'primary'
    | 'info'
    | 'success'
    | 'warning'
    | 'danger';
  selectIsSize: 'large' | 'medium' | 'small';
  selectIsLoading: boolean;
}

export class TextInput extends React.Component<Props> {
  //   Set default properties

  //   static defaultProps: Props = {
  //     fieldIsGrouped: false,
  //     fieldHasAddons: false,
  //     labelText: 'Label',
  //     fieldIsHorizontal: false
  //   };

  // Items shown in property panel
  static propertyControls: PropertyControls = {
    fieldIsGrouped: { type: ControlType.Boolean, title: 'Group Fields?' },
    fieldGroupDirection: {
      title: 'Field Group Direction',
      type: ControlType.SegmentedEnum,
      optionTitles: ['Right', 'Centered'],
      options: ['right', 'centered'],
      hidden(props) {
        return props.fieldIsGrouped === false;
      }
    },
    fieldHasAddons: { type: ControlType.Boolean, title: 'Field has addons?' },
    fieldAddonsDirection: {
      title: 'Field addons direction',
      type: ControlType.SegmentedEnum,
      optionTitles: ['Right', 'Centered', 'Full Width'],
      options: ['right', 'centered', 'fullwidth'],
      hidden(props) {
        return props.fieldHasAddons === false;
      }
    },
    fieldIsHorizontal: {
      type: ControlType.Boolean,
      title: 'Horizontal Field?'
    },
    labelIsSize: {
      title: 'Label Size',
      type: ControlType.SegmentedEnum,
      optionTitles: ['Large', 'Medium', 'Small'],
      options: ['large', 'medium', 'small']
    },
    labelText: { title: 'Label Text', type: ControlType.String },
    controlIsLoading: { type: ControlType.Boolean, title: 'Control Loading?' },
    contorlIsExpanded: {
      type: ControlType.Boolean,
      title: 'Control Expanded?'
    },
    controlHasIcons: { type: ControlType.Boolean, title: 'Control has icons?' },
    inputIsSize: {
      title: 'Input Size',
      type: ControlType.SegmentedEnum,
      optionTitles: ['Large', 'Medium', 'Small'],
      options: ['large', 'medium', 'small']
    },
    inputIsColor: {
      title: 'Input Color',
      type: ControlType.Enum,
      optionTitles: Object.keys(colors),
      options: Object.values(colors)
    },
    inputIsActive: { title: 'Input Active?', type: ControlType.Boolean },
    inputIsHovered: { title: 'Input Hovered?', type: ControlType.Boolean },
    inputIsFocused: { title: 'Input Focused?', type: ControlType.Boolean },
    inputPlaceholder: { type: ControlType.String, title: 'Input Placeholder' },
    inputValue: { type: ControlType.String, title: 'Input Value' }
  };

  render() {
    return (
      <_Field
        isGrouped={
          this.props.fieldIsGrouped ? this.props.fieldGroupDirection : false
        }
        hasAddons={
          this.props.fieldHasAddons ? this.props.fieldAddonsDirection : false
        }
        isHorizontal={this.props.fieldIsHorizontal}
      >
        <_Label isSize={this.props.labelIsSize}>{this.props.labelText}</_Label>
        <_Control
          isLoading={this.props.controlIsLoading}
          hasIcons={this.props.controlHasIcons}
          isExpanded={this.props.contorlIsExpanded}
        >
          <_Input
            isSize={this.props.inputIsSize}
            isColor={this.props.inputIsColor}
            isActive={this.props.inputIsActive}
            isHovered={this.props.inputIsHovered}
            isFocused={this.props.inputIsFocused}
            placeholder={this.props.inputPlaceholder}
            value={this.props.inputValue}
          />
        </_Control>
      </_Field>
    );
  }
}

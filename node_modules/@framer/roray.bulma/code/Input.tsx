import * as React from 'react';
import { PropertyControls, ControlType } from 'framer';
import { Input as _Input } from 'bloomer';

const colors = {
  primary: 'primary',
  info: 'info',
  danger: 'danger',
  warning: 'warning',
  success: 'success',
  white: 'white',
  black: 'black',
  light: 'light',
  dark: 'dark',
  link: 'link'
};

// Define type of property
interface Props {
  //input
  inputIsSize: 'large' | 'medium' | 'small';
  inputIsColor:
    | 'white'
    | 'light'
    | 'dark'
    | 'black'
    | 'primary'
    | 'info'
    | 'success'
    | 'warning'
    | 'danger';
  inputIsActive: boolean;
  inputIsHovered: boolean;
  inputIsFocused: boolean;
  inputPlaceholder?: string;
  inputValue?: string;
}

export class Input extends React.Component<Props> {
  // Set default properties
  static defaultProps = {};

  // Items shown in property panel
  static propertyControls: PropertyControls = {
    inputIsSize: {
      title: 'Input Size',
      type: ControlType.SegmentedEnum,
      optionTitles: ['Large', 'Medium', 'Small'],
      options: ['large', 'medium', 'small']
    },
    inputIsColor: {
      title: 'Input Color',
      type: ControlType.Enum,
      optionTitles: Object.keys(colors),
      options: Object.values(colors)
    },
    inputIsActive: { title: 'Input Active?', type: ControlType.Boolean },
    inputIsHovered: { title: 'Input Hovered?', type: ControlType.Boolean },
    inputIsFocused: { title: 'Input Focused?', type: ControlType.Boolean },
    inputPlaceholder: { type: ControlType.String, title: 'Input Placeholder' },
    inputValue: { type: ControlType.String, title: 'Input Value' }
  };

  render() {
    return (
      <_Input
        isSize={this.props.inputIsSize}
        isColor={this.props.inputIsColor}
        isActive={this.props.inputIsActive}
        isHovered={this.props.inputIsHovered}
        isFocused={this.props.inputIsFocused}
        placeholder={this.props.inputPlaceholder}
        value={this.props.inputValue}
      />
    );
  }
}

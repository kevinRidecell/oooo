import * as React from 'react';
import { PropertyControls, ControlType } from 'framer';
import { Button as _Button } from 'bloomer';
import 'bulma/css/bulma.min.css';

const colors = {
  primary: 'primary',
  info: 'info',
  danger: 'danger',
  warning: 'warning',
  success: 'success',
  white: 'white',
  black: 'black',
  light: 'light',
  dark: 'dark',
  link: 'link'
};

const sizes = {
  large: 'large',
  medium: 'medium',
  small: 'small'
};

// Define type of property
interface Props {
  isActive: boolean;
  isHovered: boolean;
  isFocused: boolean;
  isColor:
    | 'white'
    | 'light'
    | 'dark'
    | 'black'
    | 'primary'
    | 'info'
    | 'success'
    | 'warning'
    | 'danger';
  isLoading: boolean;
  isSize: 'large' | 'medium' | 'small';
  isLink: boolean;
  isOutlined: boolean;
  isInverted: boolean;
  isStatic: boolean;
  label: string;
  width: number;
  height: number;
}

export class Button extends React.Component<Props> {
  // Set default properties
  static defaultProps = {
    isActive: false,
    isHovered: false,
    isFocused: false,
    isColor: 'primary',
    isLoading: false,
    isSize: 'medium',
    isLink: false,
    isOutlined: false,
    isInverted: false,
    isStatic: false,
    label: 'Button'
  };

  // Items shown in property panel
  static propertyControls: PropertyControls = {
    isActive: { title: 'Active', type: ControlType.Boolean },
    isHovered: { title: 'Hovered', type: ControlType.Boolean },
    isFocused: { title: 'Focused', type: ControlType.Boolean },
    isColor: {
      title: 'Color',
      type: ControlType.Enum,
      optionTitles: Object.keys(colors),
      options: Object.values(colors)
    },
    isLoading: { title: 'Loading', type: ControlType.Boolean },
    isSize: {
      title: 'Size',
      type: ControlType.SegmentedEnum,
      optionTitles: Object.keys(sizes),
      options: Object.values(sizes)
    },
    isLink: { title: 'Link', type: ControlType.Boolean },
    isOutlined: { title: 'Outlined', type: ControlType.Boolean },
    isInverted: { title: 'Inverted', type: ControlType.Boolean },
    isStatic: { title: 'Static', type: ControlType.Boolean },
    label: { type: ControlType.String, title: 'Label' }
  };

  render() {
    return (
      <_Button
        {...this.props}
        style={{ width: this.props.width, height: this.props.height }}
      >
        {this.props.label}
      </_Button>
    );
    // return <_Button {...this.props}>{this.props.label}</_Button>;
  }
}
